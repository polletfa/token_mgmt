#!/usr/bin/bash

# todo: make install

source "$(dirname "$(realpath "$0")")"/../etc/token_mgmt/config

TOKEN_MANAGEMENT="$(dirname "$(realpath "$0")")"/../etc/token_mgmt/
TOKEN="$TOKEN_MANAGEMENT/.token"
PROFILES="$(for i in "$TOKEN_MANAGEMENT"/profiles/*.tar; do echo -n "$(basename "$i" .tar) "; done )none"

umask 0277

function lock() {
    chmod -R u-w "$TOKEN_MANAGEMENT"/keys
}

function unlock() {
    chmod -R u+w "$TOKEN_MANAGEMENT"/keys
}

function update_backup() {
    if [ -n "$BACKUP" ]; then
	echo "Update backup..."
	rsync -e ssh -avz -H --delete --progress --rsync-path="rsync" "$TOKEN_MANAGEMENT/keys" "$BACKUP"
    fi
}

# todo: reduce text and create man page instead
function usage() {
    echo "$0 command parameters

Commands:

  create [-p ${PROFILES// /|}] [-P] [-w] [-f] DEVICE

    Create a new token.

    The disk keys are retrieved from the currently loaded token.
    If no token is loaded AND no active token exists, new disk
    keys are randomly generated.

    -p   Add profile to the token

    -P   Create partition.

    -w   Wipe the device before writing the token.

    -f   Do not request confirmation (with -p and -w).

  disable [-f] <token>

    Disable a token. This cannot be undone.

    -f   Do not request confirmation.

  list [-a]

    List active tokens.

    -a   List all tokens.

  load [-l]
 
    Load the token (decrypt disks and activate custom configuration).

    -l   Load only (don't mount the overlays or decrypt the disks).

  getkey ${DISKS// /|}

    Print the key for the disk to the standard output. 
    The key is retrieved from the currently loaded token.

  status

    Print the systemd status for the service.

  log [-a]

    Print the systemd log for the service (since boot).

    -a   Print all logs

Configuration:

  $TOKEN_MANAGEMENT/config

    General configuration

    DISKS    List of encrypted disks

    MAILTO   User to receive notifications of unauthorized boots.

    BACKUP   Remote directory for rsync backup of the keys
             <user>@<host>:<path>

    COLUMNS  Dimensions of the login terminal
    LINES    Used to position the \"Access Denied\" picture in the
             middle of the screen.

  $TOKEN_MANAGEMENT/picture

    Picture displayed on the login console on unauthorized boots.
    The picture is written in /etc/issue.
    Each pixel is represented by a number:

      0  Black
      1  Red
      2  Green
      3  Yellow
      4  Blue
      5  Magenta
      6  Cyan
      7  White

  $TOKEN_MANAGEMENT/profiles/*

    A profile is a custom configuration that is loaded on top
    of the system configuration when the token is loaded. A token
    contains a profile made of multiple overlays.

  $TOKEN_MANAGEMENT/overlays/*

    Overlays are configuration units that can be included in profiles.

Getting started:

  1) Create the first token:     $0 create none
  2) Load the token:             $0 load -l
  3) Retrieve the disk keys to
     encrypt the disks:          <encryption_command> --key-file <( $0 getkey DISK )
  4) Create additional tokens 
     for safety.

CAREFUL! IF YOU LOSE ALL ACTIVE TOKENS OR THEIR ASSOCIATED KEYS, 
THE DISK KEYS ARE LOST FOREVER!
" 
}

if [ "$1" == "" ]; then
    usage
    exit 1
fi

while [ "$1" != "" ]; do
    command="$1"; shift
    case "$command" in

        #############################################################
        # create
        #############################################################
        create)
            function create_usage() {
                echo "create [-p ${PROFILES// /|}] [-P] [-w] [-f] DEVICE"  >&2
            }

            while [ "$2" != "" ]; do
                case "$1" in
                    "-p")
                        profile="$2"; shift; shift
                        ;;
                    
                    "-P")
                        partition=y; shift
                        ;;

                    "-w")
                        wipe=y; partition=y; shift
                        ;;

                    "-f")
                        force=y; shift
                        ;;

                    *)
                        create_usage
                        exit 1
                        ;;
                esac
            done
            

	    #todo
        ;;

        #############################################################
        # disable
        #############################################################
        disable)
            function disable_usage() {
                echo "Usage: $0 $command [-f] <token>" >&2
            }

            force=
            if [ "$1" = "-f" ]; then
                force=y; shift
            fi
            uuid="$(basename "$1" .pem)"; shift

            if [ "$uuid" = "" ] || [ "$1" != "" ]; then
                disable_usage
                exit 1
            fi
            
            if [ ! -f "$TOKEN_MANAGEMENT/keys/$uuid.pem" ]; then
                echo "Token not found." >&2
                exit 1
            fi

            if [ "$force" = "" ]; then
                echo "Disabing a token will render it useless and cannot be undone." >&2
                echo "If you are sure, please confirm with:">&2
                echo >&2
                echo "    $0 $command -f $uuid">&2
                echo >&2
                exit 1
            else
                count="$("$0" list | tail -n +2 | grep -v "$uuid" -c)"
                if [ "$count" = "0" ]; then
                    echo "You cannot disable the last active token. Create another first." >&2
                    exit 1
                else
                    unlock && echo "$(head -n1 "$TOKEN_MANAGEMENT/keys/$uuid.pem")disabled: $(date)" > "$TOKEN_MANAGEMENT/keys/$uuid.pem-disabled" && rm -f "$TOKEN_MANAGEMENT/keys/$uuid.pem" && lock
		    update_backup
                fi
            fi
        ;;

        #############################################################
        # list
        #############################################################
        list)
            function list_usage() {
                echo "Usage: $0 $command [-a]">&2
            }
            
            match="*.pem"
            if [ "$1" = "-a" ]; then
                match="*.pem*"; shift
	    fi
	    if [ "$1" != "" ]; then
                list_usage
                exit 1
            fi
            {
                loadeduuid="$(cat "$TOKEN"/ID)"
                echo -e "\033[4mUUID|PROFILE|DESCRIPTION|CREATED|STATUS\033[0m"
                for i in "$TOKEN_MANAGEMENT/keys"/$match; do
                    if [ -f "$i" ]; then
                        uuid="$(basename "$(basename "$i" .pem)" .pem-disabled)"
                        st="\033[0m"
                        status=
                        if [ "$loadeduuid" == "$uuid" ]; then
                            st="\033[3m"
                            status="loaded"
                        fi
                        
                        echo -e "$st$uuid|$(head -n 1 "$i")$status\033[0m"
                    fi
                done
            } | column -s '|' -t
            ;;
        
        #############################################################
        # load
        #############################################################
        load)
	    function load_usage() {
		echo "$0 $command [-l]" >&2
	    }

	    if [ "$1" = "-l" ]; then
		loadonly=y; shift
	    fi
	    if [ "$1" != "" ]; then
		load_usage
		exit 1
	    fi

	    function issue() {
		SIGN="$(cat "$TOKEN_MANAGEMENT"/picture)"

		HEIGHT="$(echo "$SIGN" | wc -l)"
		WIDTH="$(( 2 * ( $(echo "$SIGN" | head -n1 | wc -c ) - 1 ) ))"
		X="$(( ( COLUMNS - WIDTH ) / 2 ))"
		Y="$(( ( LINES - HEIGHT ) / 2 ))"

		echo -e -n "\033[2J\033[$Y;${X}H\033[40m"
		
		prev=
		for (( i=0; i<${#SIGN}; i++ )); do
		    if [[ "${SIGN:$i:1}" == $'\n' ]]; then
			echo
			echo -e -n "\033[${X}G"
		    else
			if [ "${SIGN:$i:1}" != "$prev" ]; then
			    echo -n -e "\033[4${SIGN:$i:1}m"
			    prev="${SIGN:$i:1}"
			fi
			echo -n "  "
		    fi
		done
		echo -e "\033[H\033[40;37mUnauthorized access!"
	    }

	    function unmount() {
		cd / || exit 1
		umount "$(mount|grep "$TOKEN"|cut -f3 -d\  )" 2>/dev/null
		rmdir "$TOKEN" 2> /dev/null
	    }

	    function die() {
		echo -e "\033[31mFailed!\033[0m" >&2

		if [ -f /etc/issue ]; then
		    cp /etc/issue /etc/issue.token_mgmt.save
		else
		    echo > /etc/issue.token_mgmt.save
		fi
		issue > /etc/issue
		
		if [ "$MAILTO" != "" ]; then
		    journalctl -u token_mgmt --boot | mail -s "[token_mgmt] Unauthorized access!" "$MAILTO"
		fi
		
		unmount
		exit 1
	    }

	    if [ -f /etc/issue.token_mgmt.save ]; then
		mv /etc/issue.token_mgmt.save /etc/issue
	    fi

	    find /dev -type b -print | while read -r DEVICE; do
		echo -en "\033[33mCheck $DEVICE for token: \033[0m"
		if [ ! -b "$DEVICE" ]; then
		    echo -e "\033[31mNo device\033[0m"
		    continue
		fi
		if ! dd if="$DEVICE" of=/dev/null skip=512 count=1 status=none 2>/dev/null; then
		    echo -e "\033[31mNo device\033[0m"
		    continue
		fi
		if [ "$(tr -d '\0' < <(dd if="$DEVICE" of=/dev/stdout skip=512 count=1 status=none) | head -c2 )" != $'\x1f\x8b' ]; then
		    echo -e "\033[31mNo token\033[0m"
		    continue
		fi
		echo -e "\033[32mToken found\033[0m"

		echo -e "\033[33mCreate RAM disk...\033[0m"
		unmount
		mkdir -p "$TOKEN" || die
		mount -t tmpfs tmpfs "$TOKEN" || die
		cd "$TOKEN" || die

		echo -e "\033[33mExtract token...\033[0m"
		tar zxvf <(dd if="$DEVICE" of=/dev/stdout skip=512) || die
		echo "ID: $(cat "ID")"
                if [ -f "profile.tar.enc" ]; then
		    echo "PROFILE: $(cat "PROFILE")"
                else
                    echo "No profile."
                fi
                
		function gettokenkey() {
		    openssl rsautl -decrypt -inkey "$TOKEN_MANAGEMENT/keys/$(cat ID).pem" -in key.enc -out /dev/stdout
		}
		function getdiskkey() {
		    openssl enc -d -aes-256-cbc -iter 10 -in "$1".enc -out /dev/stdout -pass file:<(gettokenkey)
		}

                if [ -f "profile.tar.enc" ]; then 
		    echo -e "\033[33mUnpack profile\033[0m"
		    tar xvf <(openssl enc -d -aes-256-cbc -iter 10 -in profile.tar.enc -out /dev/stdout -pass file:<(gettokenkey) ) || die
		    find overlays -name "*.tar" -print | while read -r i; do
		        dirn="$(dirname "$i")"
		        basn="$(basename "$i" .tar)"
		        mkdir "$dirn/$basn" || die
		        tar xvf "$i" -C "$dirn/$basn" || die
		    done
		fi
                
		if [ "$loadonly" != "y" ]; then
                    if [ -d overlays ]; then
		        echo -e "\033[33mMount overlays...\033[0m"
		        find overlays -name "*.tar" -print | while read -r i; do
			    dirn="$(dirname "$i")"
			    basn="$(basename "$i" .tar)"
			    lowr="${dirn#overlays}/$basn"
			    
			    echo "$lowr"
			    mkdir "$dirn/$basn-work" || die
			    mount -t overlay overlay -o lowerdir="$lowr,upperdir=$TOKEN/$dirn/$basn,workdir=$TOKEN/$dirn/$basn-work" "$lowr" || die
		        done
		    fi
                        
		    echo -e "\033[33mDecrypt disks...\033[0m"
		    for i in $DISKS; do
			if [ -f "$i.enc" ]; then
			    echo "$i"
			    cryptsetup open /dev/"$i" "$i"-encrypted --key-file <(getdiskkey "$i")
			else
			    echo "Warning: no key for $i"
			fi
		    done
                    
		    #todo: put in a script on the token
		    systemctl daemon-reload
		fi
		
		exit 0
	    done

	    echo -e "\033[31mNo token found!\033[0m"
	    exit 1
            ;;

        #############################################################
        # getkey
        #############################################################
        getkey)
            function getkey_usage() {
                echo "Usage: $0 $command ${DISKS// /|}" >&2
            }
            
            disk="$1"; shift
            if [ "$disk" = "" ]; then
                getkey_usage
                exit 1
            fi
            
            for d in $DISKS; do
                if [ "$d" = "$disk" ]; then
                    if [ ! -f "$TOKEN"/key.enc ]; then
                        echo "No token loaded." >&2
                        exit 1
                    fi
                    openssl enc -d -aes-256-cbc -iter 10 -in "$TOKEN/$disk".enc -out /dev/stdout -pass \
                            file:<(openssl rsautl -decrypt -inkey "$TOKEN_MANAGEMENT/keys/$(cat "$TOKEN"/ID).pem" -in "$TOKEN"/key.enc -out /dev/stdout) \
                        || exit 1
                    exit 0
                fi
            done
            getkey_usage
            exit 1
            ;;

        #############################################################
        # status
        #############################################################
        status)
            function status_usage() {
                echo "Usage: $0 $command" >&2
            }

	    if [ "$1" != "" ]; then
		status_usage
		exit 1
	    fi

	    systemctl status token_mgmt.service
            ;;

        #############################################################
        # log
        #############################################################
        log)
            function log_usage() {
                echo "Usage: $0 $command [-a]" >&2
            }

	    params="--boot"
	    if [ "$1" = "-a" ]; then
		params=; shift
	    fi
	    if [ "$1" != "" ]; then
		log_usage
		exit 1
	    fi

	    journalctl -u token_mgmt $params
            ;;

        *)
            echo "Unknown command." >&2
            exit 1
    esac
done
