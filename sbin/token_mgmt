#!/usr/bin/bash

# todo: make install

source "$(dirname "$(realpath "$0")")"/../etc/token_mgmt/config

TOKEN_MANAGEMENT="$(dirname "$(realpath "$0")")"/../etc/token_mgmt/
TOKEN="$TOKEN_MANAGEMENT/.token"
PROFILES="$(for i in "$TOKEN_MANAGEMENT"/profiles/*; do if [ -d "$i" ]; then echo -n "$(basename "$i" .tar) "; fi; done )"
PROFILES="${PROFILES:0:-1}"

umask 0277

function lock() {
    chmod -R u-w "$TOKEN_MANAGEMENT"/keys
}

function unlock() {
    chmod -R u+w "$TOKEN_MANAGEMENT"/keys
}

function update_backup() {
    if [ -n "$BACKUP" ]; then
	echo "Update backup..."
	rsync -e ssh -avz -H --delete --progress --rsync-path="rsync" "$TOKEN_MANAGEMENT/keys" "$BACKUP"
    fi
}

function gettokenkey() {
    openssl rsautl -decrypt -inkey "$TOKEN_MANAGEMENT/keys/$(cat "$TOKEN/ID").pem" -in "$TOKEN/key.enc" -out /dev/stdout
}
function getdiskkey() {
    openssl enc -d -aes-256-cbc -iter 10 -in "$TOKEN/$1.enc" -out /dev/stdout -pass file:<(gettokenkey)
}

# todo: reduce text and create man page instead
function usage() {
    echo "$0 command parameters

Commands:

  create [-n NAME] [-p ${PROFILES// /|}] [-P] [-w] [-f] DEVICE

    Create a new token.

    If no valid token exists, new disk keys are generated.
    Otherwise, a valid token needs to be loaded and the keys are
    extracted from the token.

    -n   Name

    -p   Add profile to the token

    -P   Create partition.

    -w   Wipe the device before writing the token.

    -f   Do not request confirmation (with -p and -w).

  disable [-f] <token>

    Disable a token. This cannot be undone.

    -f   Do not request confirmation.

  list [-a]

    List active tokens.

    -a   List all tokens.

  load [-l]
 
    Load the token (decrypt disks and activate custom configuration).

    -l   Load only (don't mount the overlays or decrypt the disks).

  getkey ${DISKS// /|}

    Print the key for the disk to the standard output. 
    The key is retrieved from the currently loaded token.

  status

    Print the systemd status for the service.

  log [-a]

    Print the systemd log for the service (since boot).

    -a   Print all logs

Configuration:

  $TOKEN_MANAGEMENT/config

    General configuration

    DISKS    List of encrypted disks

    MAILTO   User to receive notifications of unauthorized boots.

    BACKUP   Remote directory for rsync backup of the keys
             <user>@<host>:<path>

    COLUMNS  Dimensions of the login terminal
    LINES    Used to position the \"Access Denied\" picture in the
             middle of the screen.

  $TOKEN_MANAGEMENT/picture

    Picture displayed on the login console on unauthorized boots.
    The picture is written in /etc/issue.
    Each pixel is represented by a number:

      0  Black
      1  Red
      2  Green
      3  Yellow
      4  Blue
      5  Magenta
      6  Cyan
      7  White

  $TOKEN_MANAGEMENT/profiles/*

    A profile is a custom configuration that is loaded on top
    of the system configuration when the token is loaded. A token
    contains a profile made of multiple overlays.

  $TOKEN_MANAGEMENT/overlays/*

    Overlays are configuration units that can be included in profiles.

Getting started:

  1) Create the first token:     $0 create none
  2) Load the token:             $0 load -l
  3) Retrieve the disk keys to
     encrypt the disks:          <encryption_command> --key-file <( $0 getkey DISK )
  4) Create additional tokens 
     for safety.

CAREFUL! IF YOU LOSE ALL ACTIVE TOKENS OR THEIR ASSOCIATED KEYS, 
THE DISK KEYS ARE LOST FOREVER!
" 
}

if [ "$1" == "" ]; then
    usage
    exit 1
fi

while [ "$1" != "" ]; do
    command="$1"; shift
    case "$command" in

        #############################################################
        # create
        #############################################################
        create)
            function create_usage() {
                echo "create [-n NAME] [-p ${PROFILES// /|}] [-P] [-w] [-f] DEVICE"  >&2
            }

            while [ "$1" != "" ]; do
                case "$1" in
                    "-n")
                        name="$2"; shift; shift
                        ;;
                    
                    "-p")
                        profile="$2"; shift; shift
                        if [ ! -d "$TOKEN_MANAGEMENT/profiles/$profile" ]; then
                            create_usage
                            exit 1
                        fi
                        ;;
                    
                    "-P")
                        partition=y; shift
                        ;;

                    "-w")
                        wipe=y; partition=y; shift
                        ;;

                    "-f")
                        force=y; shift
                        ;;

                    *)
                        break
                        ;;
                esac
            done
            if [ "$1" = "" ] || [ "$2" != "" ]; then
                create_usage
                exit 1
            fi
            device="$1"
            
	    if [ ! -b "$device" ]; then
                if [ ! -b "/dev/$device" ]; then
		    echo "No device." >&2
                    exit 1
                else
                    device="/dev/$device"
                fi
            fi
	    if ! dd if="$device" of=/dev/null skip=512 count=1 status=none 2>/dev/null; then
		echo "Device not available." >&2
		exit 1
	    fi          

            if [ "$wipe" = "y" ] || [ "partition" = "y" ]; then
                if [ "$force" != "y" ]; then
                    echo "This will erase any data on the device. "
                    echo "If you are sure, please confirm with:">&2
                    echo >&2
                    echo -n "    $0 $command "
                    if [ -n "$name" ]; then echo -n "-n '${name//\'/\'\\\'\'}' " >&2; fi
                    if [ -n "$profile" ]; then echo -n "-p '${profile//\'/\'\\\'\'}' ">&2; fi
                    if [ -n "$partition" ] && [ -z "$wipe" ]; then echo -n "-P " >&2; fi
                    if [ -n "$wipe" ]; then echo -n "-w ">&2; fi
                    echo "-f $device">&2
                    echo >&2
                    exit 1
                fi
            fi
            
            count="$("$0" list | tail -n +2 | wc -l)"
            if [ "$count" != "0" ]; then
                for i in $DISKS; do
                    if ! getdiskkey "$i" 2>/dev/null >/dev/null; then
                        echo "Disk keys missing. Load a token first."
                        exit 1
                    fi
                done
            else
                createkeys=y
            fi

            TMP="/tmp/token_mgmt.$$"

            function die() {
                rm -fr "$TMP"
                echo "Failed!"
                exit 1
            }
            
            mkdir "$TMP"
            UUID="$(uuidgen)"
            echo "$UUID" > "$TMP"/ID

            echo "Create token private key..."
            PRIVATE_KEY="$(openssl genrsa -out /dev/stdout 4096 )" || die

            echo "Create token encryption key..."
            KEY="$(openssl rand -base64 256 )"
            openssl rsautl -encrypt \
                    -inkey <(openssl rsa -pubout -in <(echo -n "$PRIVATE_KEY") -out /dev/stdout || die ) \
                    -pubin -in <(echo -n "$KEY") -out "$TMP/key.enc" || die

            for i in $DISKS; do
                if [ "$createkeys" == "y" ]; then
                    echo "Create key for disk $i..."
                    DISKKEY="$(dd if=/dev/urandom of=/dev/stdout bs=4096 count=1 iflag=fullblock status=none | base64 )" || die
                else
                    echo "Get key for disk $i..."
                    DISKKEY="$(getdiskkey "$i" | base64)" || die
                fi
                echo "Encrypt the key for disk $i..."
                openssl enc -aes-256-cbc -iter 10 -in <(echo -n "$DISKKEY" | base64 -d) -out "$TMP/$i.enc" \
                        -pass file:<(echo -n "$KEY" ) || die
            done
                        
            if [ "$profile" != "" ]; then
                while read -r overlay; do
                    overlay="$(readlink "$overlay")"
                    echo "Pack overlay $(basename "$overlay" .tar)..."
                    tar chf "$TOKEN_MANAGEMENT/overlays/$(basename "$overlay")" -C "$TOKEN_MANAGEMENT/overlays/$(basename "$overlay" .tar)" . || exit 1
                done < <(find "$TOKEN_MANAGEMENT/profiles/$profile/overlays" -name "*.tar")
                echo "Pack profile $profile..."
                tar chf "$TOKEN_MANAGEMENT/profiles/$profile.tar" -C "$TOKEN_MANAGEMENT/profiles/$profile" . || exit 1
            fi

            echo "Encrypt profile..."
            openssl enc -aes-256-cbc -iter 10 -in "$TOKEN_MANAGEMENT/profiles/$profile.tar" -out "$TMP/profile.enc" \
                    -pass file:<(echo -n "$KEY") || die

            echo "Prepare token..."
            tar zchf "$TMP/$UUID".tar.gz -C "$TMP" --exclude="*.tar.gz" . || die

            if [ -n "$wipe" ]; then
                echo "Wipe device..."
                dd if=/dev/urandom of="$device" bs=1024 status=progress
            fi

            if [ -n "$partition" ]; then
                echo "Create new partition table..."
                echo ";,7" | sudo sfdisk  /dev/mmcblk0 || die
                mkfs.ntfs "$(ls "$device"?* | sort | head -n1)" || die
            fi
            
            echo -e "Write token..."
            dd if="$TMP/$UUID.tar.gz" of="$device" seek=512 || die

            echo "Save token key..."
            if [ ! -d "$TOKEN_MANAGEMENT/keys" ]; then
                mkdir "$TOKEN_MANAGEMENT/keys" 
            fi
            unlock || die
            { 
                echo "$profile|$name|$(date)|"
                echo -n "$PRIVATE_KEY"
            } > "$TOKEN_MANAGEMENT/keys/$UUID.pem" || { lock ; die ; }
            lock

            update_backup
                        
            exit 0
            ;;

        #############################################################
        # disable
        #############################################################
        disable)
            function disable_usage() {
                echo "Usage: $0 $command [-f] <token>" >&2
            }

            force=
            if [ "$1" = "-f" ]; then
                force=y; shift
            fi
            uuid="$(basename "$1" .pem)"; shift

            if [ "$uuid" = "" ] || [ "$1" != "" ]; then
                disable_usage
                exit 1
            fi
            
            if [ ! -f "$TOKEN_MANAGEMENT/keys/$uuid.pem" ]; then
                echo "Token not found." >&2
                exit 1
            fi

            if [ "$force" = "" ]; then
                echo "Disabing a token will render it useless and cannot be undone." >&2
                echo "If you are sure, please confirm with:">&2
                echo >&2
                echo "    $0 $command -f $uuid">&2
                echo >&2
                exit 1
            else
                count="$("$0" list | tail -n +2 | grep -v "$uuid" -c)"
                if [ "$count" = "0" ]; then
                    echo "You cannot disable the last active token. Create another first." >&2
                    exit 1
                else
                    unlock && echo "$(head -n1 "$TOKEN_MANAGEMENT/keys/$uuid.pem")disabled: $(date)" > "$TOKEN_MANAGEMENT/keys/$uuid.pem-disabled" && rm -f "$TOKEN_MANAGEMENT/keys/$uuid.pem" && lock
		    update_backup
                fi
            fi
            ;;

        #############################################################
        # list
        #############################################################
        list)
            function list_usage() {
                echo "Usage: $0 $command [-a]">&2
            }
            
            match="*.pem"
            if [ "$1" = "-a" ]; then
                match="*.pem*"; shift
	    fi
	    if [ "$1" != "" ]; then
                list_usage
                exit 1
            fi
            {
                loadeduuid="$(cat "$TOKEN"/ID)"
                echo -e "\033[4mUUID|PROFILE|DESCRIPTION|CREATED|STATUS\033[0m"
                for i in "$TOKEN_MANAGEMENT/keys"/$match; do
                    if [ -f "$i" ]; then
                        uuid="$(basename "$(basename "$i" .pem)" .pem-disabled)"
                        st="\033[0m"
                        status=
                        if [ "$loadeduuid" == "$uuid" ]; then
                            st="\033[3m"
                            status="loaded"
                        fi
                        
                        echo -e "$st$uuid|$(head -n 1 "$i")$status\033[0m"
                    fi
                done
            } | column -s '|' -t
            ;;
        
        #############################################################
        # load
        #############################################################
        load)
	    function load_usage() {
		echo "$0 $command [-l]" >&2
	    }

	    if [ "$1" = "-l" ]; then
		loadonly=y; shift
	    fi
	    if [ "$1" != "" ]; then
		load_usage
		exit 1
	    fi

	    function issue() {
		SIGN="$(cat "$TOKEN_MANAGEMENT"/picture)"

		HEIGHT="$(echo "$SIGN" | wc -l)"
		WIDTH="$(( 2 * ( $(echo "$SIGN" | head -n1 | wc -c ) - 1 ) ))"
		X="$(( ( COLUMNS - WIDTH ) / 2 ))"
		Y="$(( ( LINES - HEIGHT ) / 2 ))"

		echo -e -n "\033[2J\033[$Y;${X}H\033[40m"
		
		prev=
		for (( i=0; i<${#SIGN}; i++ )); do
		    if [[ "${SIGN:$i:1}" == $'\n' ]]; then
			echo
			echo -e -n "\033[${X}G"
		    else
			if [ "${SIGN:$i:1}" != "$prev" ]; then
			    echo -n -e "\033[4${SIGN:$i:1}m"
			    prev="${SIGN:$i:1}"
			fi
			echo -n "  "
		    fi
		done
		echo -e "\033[H\033[40;37mUnauthorized access!"
	    }

	    function unmount() {
		cd / || exit 1
		umount "$(mount|grep "$TOKEN"|cut -f3 -d\  )" 2>/dev/null
		rmdir "$TOKEN" 2> /dev/null
	    }

	    function die() {
		echo "Failed!" >&2

		if [ -f /etc/issue ]; then
		    cp /etc/issue /etc/issue.token_mgmt.save
		else
		    echo > /etc/issue.token_mgmt.save
		fi
		issue > /etc/issue
		
		if [ "$MAILTO" != "" ]; then
		    journalctl -u token_mgmt --boot | mail -s "[token_mgmt] Unauthorized access!" "$MAILTO"
		fi
		
		unmount
		exit 1
	    }

	    if [ -f /etc/issue.token_mgmt.save ]; then
		mv /etc/issue.token_mgmt.save /etc/issue
	    fi

	    while read -r device; do
		echo -n "Check $device for token: "
		if [ ! -b "$device" ]; then
		    echo "No device"
		    continue
		fi
		if ! dd if="$device" of=/dev/null skip=512 count=1 status=none 2>/dev/null; then
		    echo "Device not available."
		    continue
		fi
		if [ "$(tr -d '\0' < <(dd if="$device" of=/dev/stdout skip=512 count=1 status=none) | head -c2 )" != $'\x1f\x8b' ]; then
		    echo "No token"
		    continue
		fi
		echo "Token found."

		echo "Create RAM disk..."
		unmount
		mkdir -p "$TOKEN" || die
		mount -t tmpfs tmpfs "$TOKEN" || die
		cd "$TOKEN" || die

		echo "Extract token..."
		tar zxvf <(dd if="$device" of=/dev/stdout skip=512) || die
		echo "ID: $(cat "ID")"

                if [ ! -f "$TOKEN_MANAGEMENT/keys/$(cat ID).pem" ]; then
                    echo "Not a valid token.">&2
                    die            
                fi

                if [ -f "profile.enc" ]; then 
		    echo "Unpack profile..."
		    tar xvf <(openssl enc -d -aes-256-cbc -iter 10 -in profile.enc -out /dev/stdout -pass file:<(gettokenkey) ) || die
		    find overlays -name "*.tar" -print | while read -r i; do
		        dirn="$(dirname "$i")"
		        basn="$(basename "$i" .tar)"
		        mkdir "$dirn/$basn" || die
		        tar xvf "$i" -C "$dirn/$basn" || die
		    done
		fi
                
		if [ "$loadonly" != "y" ]; then
                    if [ -d overlays ]; then
		        echo "Mount overlays..."
		        find overlays -name "*.tar" -print | while read -r i; do
			    dirn="$(dirname "$i")"
			    basn="$(basename "$i" .tar)"
			    lowr="${dirn#overlays}/$basn"
			    
			    echo "$lowr"
			    mkdir "$dirn/$basn-work" || die
			    mount -t overlay overlay -o lowerdir="$lowr,upperdir=$TOKEN/$dirn/$basn,workdir=$TOKEN/$dirn/$basn-work" "$lowr" || die
		        done
		    fi
                        
		    echo "Decrypt disks..."
		    for i in $DISKS; do
			if [ -f "$i.enc" ]; then
			    echo "$i"
			    cryptsetup open /dev/"$i" "$i"-encrypted --key-file <(getdiskkey "$i")
			else
			    echo "Warning: no key for $i"
			fi
		    done

                    if [ -x "$TOKEN/post-load.sh" ]; then
                        "$TOKEN/post-load.sh" || die
                    fi
		fi
		
		exit 0
	    done < <(find /dev -type b -print)

	    echo "No token found!"
	    die
            ;;

        #############################################################
        # getkey
        #############################################################
        getkey)
            function getkey_usage() {
                echo "Usage: $0 $command ${DISKS// /|}" >&2
            }
            
            disk="$1"; shift
            if [ "$disk" = "" ]; then
                getkey_usage
                exit 1
            fi
            
            for d in $DISKS; do
                if [ "$d" = "$disk" ]; then
                    if [ ! -f "$TOKEN"/key.enc ]; then
                        echo "No token loaded." >&2
                        exit 1
                    fi
                    getdiskkey "$disk"
                    exit 0
                fi
            done
            getkey_usage
            exit 1
            ;;

        #############################################################
        # status
        #############################################################
        status)
            function status_usage() {
                echo "Usage: $0 $command" >&2
            }

	    if [ "$1" != "" ]; then
		status_usage
		exit 1
	    fi

	    systemctl status token_mgmt.service
            ;;

        #############################################################
        # log
        #############################################################
        log)
            function log_usage() {
                echo "Usage: $0 $command [-a]" >&2
            }

	    params="--boot"
	    if [ "$1" = "-a" ]; then
		params=; shift
	    fi
	    if [ "$1" != "" ]; then
		log_usage
		exit 1
	    fi

	    journalctl -u token_mgmt $params
            ;;

        *)
            echo "Unknown command." >&2
            exit 1
    esac
done
