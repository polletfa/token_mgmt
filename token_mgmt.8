.TH TOKEN_MGMT 8

.SH NAME
token_mgmt \- create and manage security tokens for disk encryption.

.SH SYNOPSIS
.B token_mgmt \fICOMMAND\fR [\fIPARAMS\fR...]

.SH DESCRIPTION
token_mgmt can be used to create and manage physical security tokens holding keys for disk encryption using cryptsetup. Any block device can be used as a token (external disk, memory card, USB flash drive...).
.PP
The keys are stored encrypted and a decryption key is kept on the computer. Decryption of disks encrypted using a key generated by token_mgmt can only be done with a valid token and the associated decryption key.
.PP
token_mgmt runs as a boot service. It checks all known block devices for a valid token and decrypt the disks if a token is found. Additional configuration provided on the token (profile made up of one or more overlays) can also be applied.

.SH COMMANDS
.IP create 10
Create token
.IP disable
Disable a token
.IP list
List tokens
.IP load
Load a token
.IP getkey
Read a disk key from a token
.IP status
Print status
.IP log
Print log

.SH CREATE TOKEN
.B create
[\fB\-n\fR \fINAME\fR]
[\fB\-p\fR \fIPROFILE\fR]
[\fB\-P\fR]
[\fB\-w\fR]
[\fB\-f\fR]
.IR DEVICE
.PP
Create a new token.
.PP
If no valid token exists, new disk keys are generated. Otherwise, a valid token needs to be loaded and the keys are extracted from the token.
.TP
.BR \-n
Name
.TP
.BR \-p
Add profile to the token
.TP
.BR \-P
Create partition.
.TP
.BR \-w
Wipe the device before writing the token.
.TP
.BR \-f
Do not request confirmation (with -p and -w).
.PP
.SH DISABLE TOKEN
.B disable
[\fB\-f\fR] \fITOKEN
.PP
Disable a token. This cannot be undone.
.TP
.BR \-f
Do not request confirmation.

.SH LIST TOKENS
.B list
[\fB\-a\fR]
.PP
List active tokens.
.TP
.BR \-a
List all tokens.

.SH LOAD A TOKEN
.B load
[\fB\-l\fR]
.PP
Load the token (decrypt disks and activate custom configuration).
.TP
.BR \-l
Load only (don't mount the overlays or decrypt the disks).

.SH READ A DISK KEY
.B getkey
.IR DISK
.PP
Print the key for the disk to the standard output. The key is retrieved from the currently loaded token.

.SH PRINT STATUS
.B status
.PP
Print the systemd status for the service.

.SH PRINT LOG
.B log
[\fB\-a\fR]
.PP
Print the systemd log for the service (since boot).
.TP
.BR \-a
Print all logs

.SH CONFIGURATION
.B /etc/token_mgmt/config
.PP
General configuration
.IP DISKS 10
List of encrypted disks
.IP MAILTO
User to receive notifications of unauthorized boots.
.IP BACKUP
Remote directory for rsync backup of the keys in the format \fIUSER\fR@\fIHOST\fR:\fIPATH\fR
.IP PICTURE
Picture to be displayed in case of unauthorized access. The path is relative to the configuration directory.
.PP
.B /etc/token_mgmt/profiles/*
.PP
A profile is a custom configuration that is loaded on top of the system configuration when the token is loaded. A token contains a profile made of multiple overlays.
.PP
.B /etc/token_mgmt/overlays/*
.PP
Overlays are configuration units that can be included in profiles.

.SH GETTING STARTED
.IP "1) Create the first token"
token_mgmt create none
.IP "2) Load the token"
token_mgmt load \-l
.IP "3) Retrieve the disk keys to encrypt the disks"
\fIENCRYPTION_COMMAND\fR \-\-key\-file <( token_mgmt getkey \fUDISK\fR )
.IP "4) Create additional tokens for safety."

.SH TOKENS
A token is a gzipped tar archive written at offset 512 of a block device. This is intented to put it after the MBR of a partitioned USB flash drive or memory stick. Writting a token on a partition will damage the filesystem.
.PP
The tar archive contains the following files:
.IP ID 15
A UUID identifying the token.
.IP key.enc
256 bytes random key encrypted using a 4096 bits RSA key stored on the computer. Used to encrypt other *.enc files.
.IP profile.enc
Additional configuration.
.IP *.enc
4096 bytes random keys for disk encryption (one for each device specified in the configuration).

.SH PROFILES
A token can include a profile (stored as an encrypted tar archive) which includes one or more overlays (configuration units) and a script executed after the token has been loaded (\fBpost-load.sh\fR).
.PP
The overlays are tar archives inside the overlays/ directory of the profile or one of its subdirectories. When a token is loaded, all overlays in the profile are unpacked in a ramfs filesystem and mounted using overlayfs. The lower directory is specified by the path of the overlay. For example, overlays/etc/systemd/system/getty@tty1.service.d.tar will be mounted over /etc/systemd/system/getty@tty1.service.d.
.PP
/etc/token_mgmt/overlays/ and /etc/token_mgmt/profiles/ contain the templates for the overlays and profiles. To create a new overlay, simply create a new directory containing any file you wish (for example: \fI/etc/token_mgmt/overlays/my-overlay/\fR). The archive will be created on the fly when creating a new token. To include this overlay in a profile, create a dead symbolic link to the (not yet existing) archive (for example: \fI/etc/token_mgmt/overlays/my-overlay.tar\fR).

.SH WARNING
CAREFUL! IF YOU LOSE ALL ACTIVE TOKENS OR THEIR ASSOCIATED KEYS, THE DISK KEYS ARE LOST FOREVER!
.PP
MAKE SURE YOU KEEP SEVERAL VALID TOKENS IN A SAFE AND SECURE PLACE AND KEEP A BACKUP OF THE TOKEN
DECRYPTION KEYS AS WELL (BY USING THE BUILT-IN BACKUP FUNCTIONALITY OR ANY OTHER BACKUP TOOL).

.SH SEE ALSO
.BR cryptsetup (8)

